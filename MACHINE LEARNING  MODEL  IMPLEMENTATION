# Importing necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Loading dataset
# Here we are using the popular 'SMS Spam Collection' dataset from UCI repository.
# You can load your own dataset or use any suitable text classification dataset.
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip'
dataset = pd.read_csv(url, compression='zip', delimiter='\t', header=None, names=['label', 'message'])

# Preview the dataset
dataset.head()

# Data Preprocessing
# We will check if the data has missing values and drop them
dataset.isnull().sum()

# Mapping the label column to binary values for spam (1) and ham (0)
dataset['label'] = dataset['label'].map({'spam': 1, 'ham': 0})

# Splitting the data into features (X) and target (y)
X = dataset['message']
y = dataset['label']

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Text Vectorization using TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_features=3000)

X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Building the model: Naive Bayes
nb_classifier = MultinomialNB()

# Training the model
nb_classifier.fit(X_train_tfidf, y_train)

# Making predictions on the test set
y_pred = nb_classifier.predict(X_test_tfidf)

# Model Evaluation
# Accuracy Score
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
plt.title("Confusion Matrix")
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

# Classification Report
class_report = classification_report(y_test, y_pred, target_names=['Ham', 'Spam'])
print("Classification Report:")
print(class_report)

# Conclusion
# In this notebook, we have successfully implemented a spam email classifier using Naive Bayes.
# The model's performance can be evaluated using the accuracy, confusion matrix, and classification report.
